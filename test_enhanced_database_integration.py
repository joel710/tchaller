#!/usr/bin/env python3
"""
Test d'int√©gration du moteur de recherche am√©lior√© avec la structure de base de donn√©es ultra polyvalente
"""
import sys
import os
sys.path.append('/workspace')

def test_database_schema_compatibility():
    """Test de compatibilit√© avec la nouvelle structure de base de donn√©es"""
    print("üóÑÔ∏è TEST DE COMPATIBILIT√â BASE DE DONN√âES")
    print("=" * 60)
    
    try:
        # Test d'import des nouveaux mod√®les
        from backend.new_models import Activity, Category, ActivityType, Zone, User, Review, Media
        print("‚úÖ Import des nouveaux mod√®les r√©ussi")
        
        # Test d'import du moteur de recherche am√©lior√©
        from backend.enhanced_search_engine import EnhancedConversationalSearchEngine
        print("‚úÖ Import du moteur de recherche am√©lior√© r√©ussi")
        
        # Test d'initialisation du moteur
        engine = EnhancedConversationalSearchEngine()
        print("‚úÖ Initialisation du moteur de recherche r√©ussie")
        
        # Test des patterns d'intent
        print(f"‚úÖ {len(engine.intent_patterns)} patterns d'intent configur√©s")
        for intent, patterns in engine.intent_patterns.items():
            print(f"   - {intent}: {len(patterns)} patterns")
        
        # Test des patterns d'entit√©s
        print(f"‚úÖ {len(engine.entity_patterns)} types d'entit√©s configur√©s")
        for entity_type, patterns in engine.entity_patterns.items():
            print(f"   - {entity_type}: {len(patterns)} patterns")
        
        # Test des templates de r√©ponse
        print(f"‚úÖ {len(engine.response_templates)} types de templates de r√©ponse")
        for template_type, templates in engine.response_templates.items():
            print(f"   - {template_type}: {len(templates)} variations")
        
        # Test du mapping des types d'activit√©s
        print(f"‚úÖ {len(engine.activity_type_mapping)} types d'activit√©s mapp√©s")
        for activity_type, category_name in engine.activity_type_mapping.items():
            print(f"   - {activity_type} ‚Üí {category_name}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors du test de compatibilit√©: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_search_functionality():
    """Test des fonctionnalit√©s de recherche"""
    print("\nüîç TEST DES FONCTIONNALIT√âS DE RECHERCHE")
    print("=" * 60)
    
    try:
        from backend.enhanced_search_engine import EnhancedConversationalSearchEngine
        
        engine = EnhancedConversationalSearchEngine()
        
        # Test de classification d'intent
        test_queries = [
            "Trouve-moi un h√¥pital pr√®s de moi",
            "URGENCE ! J'ai besoin d'un m√©decin",
            "O√π est la pharmacie la plus proche ?",
            "Cherche une universit√©",
            "O√π puis-je r√©parer ma voiture ?",
            "Donne-moi les horaires de la banque"
        ]
        
        print("üß™ Test de classification d'intent :")
        for query in test_queries:
            intent = engine.classify_intent(query)
            entities = engine.extract_entities(query)
            print(f"   '{query}' ‚Üí Intent: {intent}, Entit√©s: {entities}")
        
        # Test de g√©n√©ration de requ√™te SQL
        print("\nüß™ Test de g√©n√©ration de requ√™te SQL :")
        from backend.schemas import SearchRequest
        
        search_request = SearchRequest(
            query="Trouve-moi un h√¥pital",
            latitude=6.1723,
            longitude=1.2312,
            radius=5000,
            limit=5
        )
        
        sql_query, params = engine.generate_sql_query(None, search_request, "search_place", {"service_type": "h√¥pital"})
        print(f"   Requ√™te SQL g√©n√©r√©e: {sql_query[:100]}...")
        print(f"   Param√®tres: {params}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors du test de recherche: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_database_schema_structure():
    """Test de la structure de la base de donn√©es"""
    print("\nüèóÔ∏è TEST DE LA STRUCTURE DE BASE DE DONN√âES")
    print("=" * 60)
    
    try:
        # Lire le fichier SQL de la structure ultra polyvalente
        with open('/workspace/database_schema.sql', 'r') as f:
            schema_content = f.read()
        
        print("‚úÖ Fichier database_schema.sql lu avec succ√®s")
        
        # V√©rifier les tables principales
        required_tables = [
            'activities', 'categories', 'activity_types', 'users', 'zones',
            'reviews', 'media', 'conversations', 'messages', 'ambassadors',
            'verifications', 'webhooks', 'search_logs', 'user_interactions',
            'data_models', 'insights', 'subscription_plans', 'subscriptions',
            'notifications', 'audit_logs'
        ]
        
        print("üîç V√©rification des tables requises :")
        for table in required_tables:
            if f"CREATE TABLE {table}" in schema_content:
                print(f"   ‚úÖ Table {table} trouv√©e")
            else:
                print(f"   ‚ùå Table {table} manquante")
        
        # V√©rifier les extensions PostGIS
        if "CREATE EXTENSION IF NOT EXISTS postgis" in schema_content:
            print("‚úÖ Extension PostGIS configur√©e")
        else:
            print("‚ùå Extension PostGIS manquante")
        
        # V√©rifier les index spatiaux
        if "CREATE INDEX" in schema_content and "GIST" in schema_content:
            print("‚úÖ Index spatiaux configur√©s")
        else:
            print("‚ùå Index spatiaux manquants")
        
        # V√©rifier les triggers
        if "CREATE TRIGGER" in schema_content:
            print("‚úÖ Triggers configur√©s")
        else:
            print("‚ùå Triggers manquants")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors du test de structure: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_model_relationships():
    """Test des relations entre mod√®les"""
    print("\nüîó TEST DES RELATIONS ENTRE MOD√àLES")
    print("=" * 60)
    
    try:
        from backend.new_models import Activity, Category, ActivityType, Zone, User, Review, Media
        
        # V√©rifier les attributs de Activity
        activity_attrs = [
            'id', 'name', 'description', 'address', 'phone_number', 'whatsapp_number',
            'email', 'website', 'opening_hours', 'price_level', 'rating', 'review_count',
            'is_verified', 'is_active', 'latitude', 'longitude', 'location',
            'category_id', 'activity_type_id', 'zone_id', 'owner_id', 'created_at', 'updated_at'
        ]
        
        print("üîç V√©rification des attributs d'Activity :")
        for attr in activity_attrs:
            if hasattr(Activity, attr):
                print(f"   ‚úÖ {attr}")
            else:
                print(f"   ‚ùå {attr} manquant")
        
        # V√©rifier les relations
        print("\nüîç V√©rification des relations :")
        relations = [
            ('category', 'Category'),
            ('activity_type', 'ActivityType'),
            ('zone', 'Zone'),
            ('owner', 'User'),
            ('reviews', 'Review'),
            ('media', 'Media')
        ]
        
        for rel_name, rel_type in relations:
            if hasattr(Activity, rel_name):
                print(f"   ‚úÖ Relation {rel_name} vers {rel_type}")
            else:
                print(f"   ‚ùå Relation {rel_name} vers {rel_type} manquante")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors du test des relations: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_search_engine_integration():
    """Test d'int√©gration compl√®te du moteur de recherche"""
    print("\nüîß TEST D'INT√âGRATION COMPL√àTE")
    print("=" * 60)
    
    try:
        from backend.enhanced_search_engine import EnhancedConversationalSearchEngine
        from backend.schemas import SearchRequest
        
        engine = EnhancedConversationalSearchEngine()
        
        # Test de sc√©narios de recherche vari√©s
        search_scenarios = [
            {
                "name": "Recherche d'h√¥pital d'urgence",
                "query": "URGENCE ! J'ai besoin d'un h√¥pital maintenant",
                "latitude": 6.1723,
                "longitude": 1.2312,
                "expected_intent": "emergency"
            },
            {
                "name": "Recherche de pharmacie",
                "query": "O√π est la pharmacie la plus proche ?",
                "latitude": 6.1723,
                "longitude": 1.2312,
                "expected_intent": "search_place"
            },
            {
                "name": "Recherche d'universit√©",
                "query": "Cherche une universit√© pr√®s de moi",
                "latitude": 6.1723,
                "longitude": 1.2312,
                "expected_intent": "search_place"
            },
            {
                "name": "Recherche de garage",
                "query": "O√π puis-je r√©parer ma voiture ?",
                "latitude": 6.1723,
                "longitude": 1.2312,
                "expected_intent": "find_by_service"
            }
        ]
        
        print("üß™ Test des sc√©narios de recherche :")
        for scenario in search_scenarios:
            print(f"\nüìù {scenario['name']}:")
            print(f"   Requ√™te: {scenario['query']}")
            
            # Classification
            intent = engine.classify_intent(scenario['query'])
            entities = engine.extract_entities(scenario['query'])
            
            print(f"   Intent d√©tect√©: {intent}")
            print(f"   Entit√©s extraites: {entities}")
            
            # V√©rification de l'intent attendu
            if intent == scenario['expected_intent']:
                print(f"   ‚úÖ Intent correct")
            else:
                print(f"   ‚ö†Ô∏è Intent attendu: {scenario['expected_intent']}, obtenu: {intent}")
            
            # Test de g√©n√©ration de requ√™te SQL
            search_request = SearchRequest(
                query=scenario['query'],
                latitude=scenario['latitude'],
                longitude=scenario['longitude'],
                radius=5000,
                limit=5
            )
            
            try:
                sql_query, params = engine.generate_sql_query(None, search_request, intent, entities)
                print(f"   ‚úÖ Requ√™te SQL g√©n√©r√©e ({len(sql_query)} caract√®res)")
            except Exception as e:
                print(f"   ‚ùå Erreur g√©n√©ration SQL: {e}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors du test d'int√©gration: {e}")
        import traceback
        traceback.print_exc()
        return False

def main():
    """Fonction principale de test"""
    print("üß≠ TEST D'INT√âGRATION MVP AM√âLIOR√â + STRUCTURE ULTRA POLYVALENTE")
    print("=" * 80)
    print("V√©rification de la compatibilit√© entre :")
    print("‚Ä¢ Moteur de recherche am√©lior√©")
    print("‚Ä¢ Structure de base de donn√©es ultra polyvalente")
    print("‚Ä¢ Mod√®les SQLAlchemy mis √† jour")
    print("=" * 80)
    
    tests = [
        ("Compatibilit√© base de donn√©es", test_database_schema_compatibility),
        ("Fonctionnalit√©s de recherche", test_search_functionality),
        ("Structure de base de donn√©es", test_database_schema_structure),
        ("Relations entre mod√®les", test_model_relationships),
        ("Int√©gration compl√®te", test_search_engine_integration)
    ]
    
    results = []
    
    for test_name, test_func in tests:
        print(f"\n{'='*20} {test_name.upper()} {'='*20}")
        try:
            result = test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"‚ùå Erreur critique dans {test_name}: {e}")
            results.append((test_name, False))
    
    # R√©sum√© des r√©sultats
    print("\n\nüìä R√âSUM√â DES TESTS")
    print("=" * 80)
    
    passed = 0
    total = len(results)
    
    for test_name, result in results:
        status = "‚úÖ R√âUSSI" if result else "‚ùå √âCHOU√â"
        print(f"{test_name}: {status}")
        if result:
            passed += 1
    
    print(f"\nüéØ R√âSULTAT GLOBAL: {passed}/{total} tests r√©ussis")
    
    if passed == total:
        print("\nüéâ TOUS LES TESTS SONT PASS√âS !")
        print("‚úÖ Le MVP am√©lior√© est parfaitement int√©gr√© avec la structure ultra polyvalente")
        print("‚úÖ Tous les champs de la base de donn√©es correspondent")
        print("‚úÖ Le moteur de recherche utilise la nouvelle structure")
        print("‚úÖ Les relations entre mod√®les sont correctes")
        print("\nüöÄ Le syst√®me est pr√™t pour la production !")
    else:
        print(f"\n‚ö†Ô∏è {total - passed} test(s) ont √©chou√©")
        print("üîß Des corrections sont n√©cessaires avant la production")

if __name__ == "__main__":
    main()